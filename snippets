;; -*- mode: emacs-lisp; -*-


;;; Enable clang-format
(defun yuri/clang-format-for-c-mode ()
  "Enable `clang-format' for C mode."
  (require 'clang-format)
  (setq-default clang-format-style "llvm")
  (define-key c-mode-map (kbd "C-c u") 'clang-format-buffer))

(defun yuri/clang-format-for-cpp-mode ()
  "Enable `clang-format' for C++ mode."
  (require 'clang-format)
  (setq-default clang-format-style "llvm")
  (define-key c++-mode-map (kbd "C-c u") 'clang-format-buffer))

(add-hook 'c-mode-hook 'yuri/clang-format-for-c-mode)
(add-hook 'c++-mode-hook 'yuri/clang-format-for-cpp-mode)

;;; Find private settings
(defun yuri/find-mxem-private-config ()
  "Find mxem private configuration file."
  (interactive)
  (find-file-existing
   (expand-file-name "lisp/mx-private.el" user-emacs-directory)))

;;; Sanityinc utils
(if (fboundp 'with-eval-after-load)
    (defalias 'after-load 'with-eval-after-load)
  (defmacro after-load (feature &rest body)
    "After FEATURE is loaded, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,feature
       '(progn ,@body))))

(defun add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))

(defun sanityinc/string-all-matches (regex str &optional group)
  "Find all matches for `REGEX' within `STR', returning the full match string or group `GROUP'."
  (let ((result nil)
        (pos 0)
        (group (or group 0)))
    (while (string-match regex str pos)
      (push (match-string group str) result)
      (setq pos (match-end group)))
    result))
